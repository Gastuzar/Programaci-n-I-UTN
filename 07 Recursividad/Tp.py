#1 Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
# entre 1 y el n√∫mero que indique el usuario

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
    
#2Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
# especifique.

def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

#3 Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
# exponente, utilizando la f√≥rmula ùëõ
# ùëö = ùëõ ‚àó ùëõ(ùëö‚àí1)
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)
    
#4 Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
# decimal y devuelva su representaci√≥n en binario como una cadena de texto.
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        # n // 2 devuelve la parte entera de la divisi√≥n
        # n % 2 devuelve el residuo de la divisi√≥n
        return decimal_a_binario(n // 2) + str(n % 2)
#5 Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
# lo es.
def es_palindromo(palabra):
    #si la longitud de la palabra es 0 o 1, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    #compara el primer y √∫ltimo car√°cter
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1]) 
#6Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
#n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n):
    if n == 0:
        return 0
    else:
        return n % 10 + suma_digitos(n // 10)
    
#7 Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
# bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
# √∫ltimo nivel con un solo bloque


def contar_bloques(n):
    if n == 0:
        return 0
    else:
        return n + contar_bloques(n - 1)
    
#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
# aparece ese d√≠gito dentro del n√∫mero.
def contar_digito(numero, digito):
    # si el n√∫mero es 0, no hay m√°s d√≠gitos que contar
    if numero == 0:
        return 0
    else:
        # si el √∫ltimo d√≠gito del n√∫mero es igual al d√≠gito buscado
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)